{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import { PluginListenerHandle } from \"@capacitor/core\";\n\nexport interface CapacitorMusicControlsInfo {\n    track?: string;\n    artist?: string;\n    cover?: string;\n    isPlaying?: boolean;\n    dismissable?: boolean;\n    hasPrev?: boolean;\n    hasNext?: boolean;\n    hasSkipForward?: boolean;\n    hasSkipBackward?: boolean;\n    skipForwardInterval?: number;\n    skipBackwardInterval?: number;\n    hasScrubbing?: boolean;\n    hasClose?: boolean;\n    album?: string;\n    duration?: number;\n    elapsed?: number;\n    ticker?: string;\n    playIcon?: string;\n    pauseIcon?: string;\n    prevIcon?: string;\n    nextIcon?: string;\n    closeIcon?: string;\n    notificationIcon?: string;\n}\n\nexport interface CapacitorMusicControlsPlugin {\n    /**\n     * Create the media controls\n     * @param options {MusicControlsOptions}\n     * @returns {Promise<any>}\n     */\n    create(options: CapacitorMusicControlsInfo): Promise<any>;\n\n    /**\n     * Destroy the media controller\n     * @returns {Promise<any>}\n     */\n    destroy(): Promise<any>;\n\n    /**\n     * Toggle play/pause:\n     * @param isPlaying {Object}\n     */\n    updateIsPlaying(args: {\n        isPlaying: boolean;\n    }): void;\n\n    /**\n     * Update elapsed time, optionally toggle play/pause:\n     * @param args {Object}\n     */\n    updateElapsed(args: {\n        elapsed: number;\n        isPlaying: boolean;\n    }): void;\n\n    /**\n     * Toggle dismissable:\n     * @param dismissable {boolean}\n     */\n    updateDismissable(dismissable: boolean): void;\n\n    addListener(event: string, callback: (info: any) => void): Promise<PluginListenerHandle>;\n}"]}